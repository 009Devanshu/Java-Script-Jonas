>> Hello World! (in Firefox Developer Tool)
Ways to Open Firefox Developer Tool
	> ctrl + shift + c  And Choose Console
	> ctrl + shift + J			(It only worked with chrome, now with firefox)
	> Right click on the screen and choose inspect	(It only worked with chrome, not with firefox)

1) alert("Hello World!") and press Enter
	Javascript will give a pop-window which says Hello World!
	
2) let js='amazing' and Hit Enter
if(js=='amazing') alert ('javascript is fun!') ---> Hit Enter
	Javascript will give a pop-up window saying 'javascript is fun'
	
3) We can also change js to 'boring'
js='boring' ---> Hit Enter
if(js=='amazing') alert('javascript is fun!') ----> Hit Enter
	The alert window will not be shown

We can go previous comments using up arrow.

4) 40+8+23-10	---> Hit Enter
61




>>>>>>>>>>>>>>>>>>>>>>>>>A Brief Introduction To JavaScript

Javascript is a high-level, object-oriented, multi-paradigm programming language.
High-level----> We dont' have to worry about complex stuff like memory management.
Multi-paradigm----> We can use different styles of programming.
Programming language---> Instruct computer to do things.
Object-Oriented----> Based on objects, for storing most of data.


The Role of javascript in Web-development
-------------------------------------------------
Front-End Apps
	Dynamic effects and web-development in the browser
	Frameworks based on javascript
		React, Angular, Vue
	
Back-end apps
	Web-applications on web-servers
		nodeJs

Native Mobile Applications
	React Native, Ionic Framework
	
Native Desktop Applications
	Electron
	




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Linking A JavaScript File

index.html
--------------
<html>
...
..
..
..
	<script>
		let js='amazing';	(; (semi-colon) is optional but it is a good practice)
		if(js=='amazing') alert ('javascript is fun!');
		
		//40+8+23-10;		(We need to tell javascript to explicitly output the result on console)
		console.log(40+8+23-10);
	</script>
	</body>
	..
	..
</html>

This script is an inline script.

> External js file instead of using inline script. We can get rid of script in index.html.

script.js
=============
	let js = "amazing";
	if (js == "amazing") alert("javascript is fun!");
	console.log(40 + 8 + 23 - 10);


Now, linking js file to html file and we usually do that at the end of the body tag. 
<body>
..
..
..
<script src="script.js"></script>
</body>



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Values And Variables<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

let firstName='Jonas';
console.log(firstName);

>>Conventions and Rules for naming variables
--------------------------------------------------
CamelCaseNotation	(Most Popular)
let firstName/firstPersonName='Matilda';



let fist_name/first_name_person='Matilda';


>> Rules for naming variables
--------------------------------
let 3years=3;	(This is wrong)
	(Can not start a variable name with a number)

Variable names can not have special symbols except underscode and dollar sign.
We can not use reserved keyword for naming variable. 

let new = 27;	(Wrong)
let function=27;	(Wrong)
let name='Jonas';	(Although it is reserved keyword but it is allowed to use)


>> Important Conventions
------------------------------
let Person = 'Jonas';	(This is not right)
let person = 'Jonas';	(This is correct way)

let PI = 3.1415;	(This is correct)(It is constant, so it should be written in capital letters)



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Data Types<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
In every programming language, values can have different types, depending upon types of data that we want to hold.

Value can be Object or Primitive. 
Object:-
	let me={
		name='Jonas'
		};
		
Primitive:-
	let firstName = 'Jonas';
	let age = 10;
	

The 7 primitive data types:-
-----------------------------
1) Number: Floating Point Numbers --< Used for decimal and integers 
	let age = 23; which is similar to let age = 23.0;
	
2) String: Sequence of characters --< Used for texts 
	let firstName = 'Jonas';	(No matter, single quotes or double quotes)

3) Boolean: Logical type that can be true or false --> Used for taking decisions
	let fullAge = true;
	
4) Undefined: Value taken by a variable that is not yet defined. (empty value)
	let children;
	
5) Null: Also means 'empty value'

6) Symbol(ES2015): Value that is unique and can not be changed. [Not useful for now]

7) BigInt(ES2020): Larger integers than the number type can hold.


	JavaScript has dynamic typing: We do not have to manually define the data type of the value stored in a variable. Instead, datatypes are defined automatically. 
		Note: Value has type, not variable
		
//let firstName = 'Jonas'; Single Line Comment		(ctrl + /)
/* First-line
   Second-line
   .			Multi-lines comment
   .
   nth line */
   

>If one variable is holding the value of one particular type, the same variable can hold the value of different type at another time. 
let javascriptIsFun = true;
javascriptIsFun = 100;


> typeof operator
It tells the type of value

console.log(typeof true);
Output:- boolean

console.log(typeof javascriptIsFun);
Output:- Number

> Undefined
let year;
console.log(year);
console.log(typeof year);
Output: undefined	(Value of the variable)
	undefined 	(Type of the variable)
	

We can reassign the variable
year = 1991;
console.log(year);
Output: 1991;
	
 
> console.log(typeof null);
	It is similar to undefined. Both the value and type of the value are null.
Output--> object	(It is regarded as a bug in JS) 


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>let, const, var<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

let and const were introduced in ES6 so they are modern javascript whereas var is the old way of declaring variables. 

let age = 30;
age=31;
We say that is is reassigning the variable or also we say that we mutate the age variable. 

> value in a const variable can not be changed.
const birthYear = 1991;
birthYear = 1990;	(We can not reassign the variable because birthyear is immutable variable)


> const job;	(It will give error, we can not do this)

Note: Use const as much as possible.

> var	(It should be completely avoided)
var job = 'programmer';
job = 'teacher';
(Although, var looks same as let but they are different. let is block-scoped and var is function-scoped. We will learn it in Section-7)
  
	Some people point out that we don't even have to declare variables at all because it is not mandatory.
	lastName = 'Schmedtmann';
	However, this is actually a pretty terrible idea because it does not create a varible in the current so-called scope, instead javascript will create a property on the global-scope. 
	
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Basic Operators<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

> Mathematical Operations
	const ageJonas = 2037-1991;
	console.log(ageJonas);		O/P:- 41
	
> const ageJonas = 2037-1991;
  const ageSarah = 2037-2018;
  console.log(ageJonas,ageSarah);  (We can also do this)	O/P:-46 19	

> 2037 is being repeated so, best practice is ->
const now=2037;
const ageJonas = now-1991;
const ageSarah=now-2018;
console.log(ageJonas,ageSarah);//46 19

console.log(ageJonas+2,ageSarah/2,2**3);
Output:- 92 9.5 8
//2**3 means 2 to the power of 3. 

-------------------------------------------------------------------
> Assignment Operator(=)

let x=10+5;	//15
x +=10;		//x=x+10=25;
x *=4;		//x=x*4=100;
x++;		//x=x+1;101
x--;		//x=x-1=100;
x--;		//x=x-1;99;

console.log(x);


------------------------------------------------------------------------
> Comparison Operators	(>, <, >=, <=)
console.log(ageJonas>ageSarah);		//true
cons isFullAge = ageJonas>=18;
Note: If we write variable in consoleor do anything with variable in console, we can do that because console has access to variables declared in vs code. 

console.log(now-1991>now-2018);
	It is same as console.log(ageJonas>ageSarah);
	

------------------------------------------------------------------------
> Concatenation

const firstName='Devanshu';
const lastName='Batham';
console.log(firstName + " "+lastName);


------------------------------------------------------------------------
> Operator Precedence
	Operator Precedence MDN

x = y = 10 -5 + 20;		(What is the flow, use MDN reference)


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Strings and Template Literals<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

const firstName = 'Jonas';
const job = 'teacher';
const birthYear = 1991;
const year = 2037;

const jonas = "I'm "+firstName+', a ' + (year-1991)+' year old '+job+'!';
console.log(jonas);

const jonasNow = `I'm ${firstName}, a ${year-birthYear} year old ${job}!`;		This is template literal.
console.log(jonasNow);

> Multilines before ES6
console.log('String with \n\
multiple \n\
lines');

Now with template Literal, It is very easy--->
console.log(`String with
multiple
lines`);


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>TAKING DECISIONS: if/else statements<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
> if-else control structure
if(){

} else{

}

Any variable declared inside code-block will not be accessible outside the codeblock
const birthYear = 1991;
if(birthYear<=2000){
	let century = 20;
} else {
	let century = 21;
}
console.log(century);	//error: century is not defined

const birthYear = 2012;
let century;
if(birthYear<=2000){
	century = 20;
} else {
	century = 21;
}

console.log(century);


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Type Coversion and Coercion<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Type conversion is when we manually convert from one type to another, on the other hand, type coercion is when JS automatically convert types behind the scenes for us.

>> Type Conversion
Number(String): We can convert String into number using this function. 

const inputYear = '1991';
console.log(inputYear+18);	//199118

So, we need to convert String '1991' to a number
console.log(Number(inputYear)+18);	//2009

> console.log(Number('Jonas'));		//NaN

If we check ---> console.log(typeof NaN);	//number	(It means it is an invalid number)
console.log(typeof 100);		//number

console.log(String(23));		//23	(A string)

--> Javascript can only convert to three types
to a string
to a number
to a boolean

But, we can't convert to something like to undefined or to the null. 

>>> Type Coercion
	Type Coecion happens 


>> Type Coercion
	Type Coercion happens whenever an operator is dealing with two values that have different types, So in that case JS will then, behind the scenes, convert one of the values to match the other value. So that in the end, the operator can be executed. 
	
	
console.log('I am '+23+' years old');
	JS will convert this number to String.
Output:- I am 23 year old.


-> console.log('23'-'10'-3);		//Output:- 10
	Type Coercion due to minus sign
-> console.log('23'+'10'+3);		//23103
-	Concatenation due to plus sign
-> console.log('23'*'2');		//46
-> console.log('23'/'2');		//21.5

Question:
let n = "1" + 1;
n = n - 1;
console.log(n);

Question: 
2+3+4+'5'
95	(A String)

Question: "10" - "4" - "3" - 2 + "5"
15	(A String)



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>TRUTHY AND FALSY VALUES<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

Falsy values are values that are not exactly false, but will become false when we try to convert them into a boolean. In JS, there are only five falsy values. 
There are total five falsy values. 

0
undefined
NaN
null
empty string

console.log(Boolean(0));		//false
console.log(Boolean(undefined));	//false	
console.log(Boolean(NaN));		//false
console.log(Boolean(null));		//false
console.log(Boolean(""));		//false
console.log(Boolean({}));		//true
console.log(Boolean("Jonas"));		//true

	In practice, conversion to Boolean is implicit, not explicit, in other words, is always typed coercion that JS does automatically behind the scenes. It happens in two scenarios:--
		1) When using logical operators
		2) In a logical context like in a condition of if-else statement. 
		
Use-Case:-
-------------

const money=0;
if(money){
	console.log("Don't spend it all;");
}
else{
	console.log("You should get a job");
}
Output:- You should get a job. 

Why?
	Money is number and it is 0. But, in the logical context of if-else statement condition, in if(money), here javascript will try to coerce any value into a boolean. 
	In our condition, money is 0 and 0 is falsy value, so this number will be converted to false. 

	
Another Use-Case
----------------------
To check if a variable is actually defined or not?

let height;
if(height){
	console.log('Yay! Height is defined');
}
else {
	console.log('Height is UNDEFINED');
}
Output:- Height is undefined.


But, this below can create problem
let height=0;
if(height){
	console.log('Yay! Height is defined');
}
else {
	console.log('Height is UNDEFINED');
}	

Output:- Height is UNDEFINED		(But height is defined)


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Equality Operators (== vs ===)<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

const age=18;
if(age===18)	

(====)	will give boolean value. This operator is called strict equality operator. It is strict because it does not perform type coercion. 

const age=18;
if(age===18)	console.log('You just became an adult');			(Note: No need of curly bracket because there is only one statement)

(==)	Loose equlity operator. It does type coercion. 

console.log('18'==18); 		//true
	'18' will be converted to number
	
Example:-
const age='18';
if(age===18)	console.log('You just became an adult: D(strict)');
if(age==18)	console.log('You just became an adult: D(loose)');

Output: You just became an adult : D(loose)

Note: Avoid loose equality operator as much as possible. 


>>>>>> We can get a value from webpage using prompt function
prompt("What is your favorite value?");
	Go webpage, a prompt window will be appeared and give the number and hit ok. But, we need to store value represented by prompt("What is your number?");
	
	const favorite = prompt("What is your favorite number");
	console.log(favorite);
	console.log(typeof favorite);	//string


>> else-if
const favorite=Number(prompt(`What's your favorite number?`));

if(favorite==23){
	console.log(`Cool! 23 is an amazing number`);
}else if(favorite==7){
	console.log(`7 is also a cool number`);
}else if(favorite==9){
	console.log(`9 is also a cool number`);
}else{
	console.log('Number is not 23 or 7 or 9');
}		


if(favorite!==23) console.log("why not 23!");

!== Strict operator
!=  loose operator
 
 
 
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>BOOLEAN LOGIC<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 
 
 
 
 
 
 

